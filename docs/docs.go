// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "My Github",
            "url": "https://github.com/rodrigoPQF"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/request": {
            "put": {
                "description": "Updates details of a travel request by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Travel Request"
                ],
                "summary": "Updates a travel request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Travel Request ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body for updating a travel request",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.UpdateTravelRequestBodyInputDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.BaseResponseHandler"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.BaseResponseHandler"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new travel request with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Travel Request"
                ],
                "summary": "Creates a new travel request",
                "parameters": [
                    {
                        "description": "Travel Request creation payload",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.CreateTravelRequestInputDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.BaseResponseHandler"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.BaseResponseHandler"
                        }
                    }
                }
            }
        },
        "/request/all": {
            "get": {
                "description": "Fetches all travel requests based on query parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Travel Request"
                ],
                "summary": "Retrieves a list of all travel requests",
                "parameters": [
                    {
                        "enum": [
                            "PENDING",
                            "APPROVED",
                            "CANCELED"
                        ],
                        "type": "string",
                        "description": "Status filter",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Limit per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.BaseResponseHandler"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "payload": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dtos.TravelRequestDto"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.BaseResponseHandler"
                        }
                    }
                }
            }
        },
        "/request/{id}": {
            "get": {
                "description": "Fetches details of a travel request by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Travel Request"
                ],
                "summary": "Retrieves a travel request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Travel Request ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.BaseResponseHandler"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "payload": {
                                            "$ref": "#/definitions/dtos.TravelRequestDto"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.BaseResponseHandler"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dtos.CreateTravelRequestInputDto": {
            "type": "object",
            "required": [
                "applicantName",
                "departureDate",
                "destination",
                "id",
                "returnDate",
                "status"
            ],
            "properties": {
                "applicantName": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3
                },
                "departureDate": {
                    "type": "string"
                },
                "destination": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3
                },
                "id": {
                    "type": "string"
                },
                "returnDate": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "REQUESTED",
                        "APPROVED",
                        "CANCELED"
                    ]
                }
            }
        },
        "dtos.TravelRequestDto": {
            "type": "object",
            "properties": {
                "applicantName": {
                    "type": "string"
                },
                "departureDate": {
                    "type": "string"
                },
                "destination": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "returnDate": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dtos.UpdateTravelRequestBodyInputDto": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "APPROVED",
                        "CANCELED"
                    ]
                }
            }
        },
        "handlers.BaseResponseHandler": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "payload": {},
                "status": {
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/v1/travel",
	Schemes:          []string{},
	Title:            "Travel API Documentation",
	Description:      "Teste Técnico - Desenvolvedor Pleno Golang Onfly - Documentação",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
