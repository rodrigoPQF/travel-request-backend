// Code generated by MockGen. DO NOT EDIT.
// Source: internal/travel/infra/repositories/travel_request_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	database "github.com/rodrigoPQF/travel-request-backend/internal/infra/database"
	models "github.com/rodrigoPQF/travel-request-backend/internal/travel/infra/models"
	utils "github.com/rodrigoPQF/travel-request-backend/internal/utils"
)

// MockTravelRequestRepository is a mock of TravelRequestRepository interface.
type MockTravelRequestRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTravelRequestRepositoryMockRecorder
}

// MockTravelRequestRepositoryMockRecorder is the mock recorder for MockTravelRequestRepository.
type MockTravelRequestRepositoryMockRecorder struct {
	mock *MockTravelRequestRepository
}

// NewMockTravelRequestRepository creates a new mock instance.
func NewMockTravelRequestRepository(ctrl *gomock.Controller) *MockTravelRequestRepository {
	mock := &MockTravelRequestRepository{ctrl: ctrl}
	mock.recorder = &MockTravelRequestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTravelRequestRepository) EXPECT() *MockTravelRequestRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTravelRequestRepository) Create(ctx context.Context, travelRequest *models.TravelRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, travelRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTravelRequestRepositoryMockRecorder) Create(ctx, travelRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTravelRequestRepository)(nil).Create), ctx, travelRequest)
}

// Find mocks base method.
func (m *MockTravelRequestRepository) Find(ctx context.Context, filter map[string]interface{}, pagination utils.Pagination) ([]*models.TravelRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, filter, pagination)
	ret0, _ := ret[0].([]*models.TravelRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockTravelRequestRepositoryMockRecorder) Find(ctx, filter, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockTravelRequestRepository)(nil).Find), ctx, filter, pagination)
}

// FindById mocks base method.
func (m *MockTravelRequestRepository) FindById(ctx context.Context, id string) (*models.TravelRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(*models.TravelRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockTravelRequestRepositoryMockRecorder) FindById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockTravelRequestRepository)(nil).FindById), ctx, id)
}

// Tx mocks base method.
func (m *MockTravelRequestRepository) Tx(arg0 database.RepositoryTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Tx indicates an expected call of Tx.
func (mr *MockTravelRequestRepositoryMockRecorder) Tx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockTravelRequestRepository)(nil).Tx), arg0)
}

// Update mocks base method.
func (m *MockTravelRequestRepository) Update(ctx context.Context, travelRequest *models.TravelRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, travelRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTravelRequestRepositoryMockRecorder) Update(ctx, travelRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTravelRequestRepository)(nil).Update), ctx, travelRequest)
}
